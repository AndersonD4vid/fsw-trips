// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trip {
  id              String            @id @default(uuid()) // @id define a Primary Key e @default significa que se eu criar uma trip e não passar o ID ele gera um ID aleatório
  name            String
  location        String
  startDate       DateTime
  endDate         DateTime
  pricePerDay     Decimal           @db.Decimal(8, 2) // @db.Decimal(8, 2) significa que posso ter 8 casas decimais com precisão de 2 casas, exemplo: 1500.21
  description     String
  coverImage      String
  imageUrl        String[]
  highlights      String[]
  maxGuests       Int
  TripReservation TripReservation[]
}

model TripReservation {
  id     String @id @default(uuid()) // @id define a Primary Key e @default significa que se eu criar uma trip e não passar o ID ele gera um ID aleatório
  tripId String
  trip   Trip   @relation(fields: [tripId], references: [id]) // Essa viagem tem uma relação onde o tripId, referencia ao campo [id] da viagem, ou seja do model Trip. OBS: Não salva no banco, serve apenas para controle interno
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String            @id @default(cuid())
  name            String?
  email           String?           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  TripReservation TripReservation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
